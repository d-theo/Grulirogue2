import { MapEffect } from "../../map/map-effect";
import { Affect } from "./affects";
import { FlashbackSpell, AgeSpell, DashSpell, SlowSpell, TrapSpell, TeleportationSpell, ImproveArmourSpell, ImproveWeaponSpell, BlinkSpell, IdentifiySpell, KnowledgeSpell, WildFireSpell, RootTrapSpell, PoisonTrapSpell, UnholySpellBook, XPEffect, CleaningEffect, RogueEventSpell, FearSpell, SacrificeSpell, RealityEventSpell, AsservissementSpell, WeaknessSpell, SummonWeakSpell, createElementalSpell, EffectTarget } from "./spells";

export const SpellBook = {
    FlashbackSpell: new FlashbackSpell(),
    AgeSpell: new AgeSpell(),
    DashSpell: new DashSpell(),
    SlowSpell: new SlowSpell(),
    TrapSpell: new TrapSpell(),
    TeleportationSpell: new TeleportationSpell(),
    ImproveArmourSpell: new ImproveArmourSpell(),
    ImproveWeaponSpell: new ImproveWeaponSpell(),
    BlinkSpell: new BlinkSpell(),
    IdentifiySpell: new IdentifiySpell(),
    KnowledgeSpell: new KnowledgeSpell(),
    WildFireSpell: new WildFireSpell(),
    RootTrapSpell: new RootTrapSpell(),
    PoisonTrapSpell: new PoisonTrapSpell(),
    UnholySpellBook: new UnholySpellBook(),
    XPEffect: new XPEffect(),
    CleaningEffect: new CleaningEffect(),
    RogueEventSpell: new RogueEventSpell(),
    FearSpell: new FearSpell(),
    SacrificeSpell: new SacrificeSpell(),
    RealityEventSpell: new RealityEventSpell(),
    AsservissementSpell: new AsservissementSpell(),
    WeaknessSpell: new WeaknessSpell(),
    SummonWeakSpell: new SummonWeakSpell(),

    // Custom
    WaterLine: createElementalSpell({
        shapeStrategy: 'line',
        type: EffectTarget.Location,
        affect: () => new Affect('wet').create(),
        mapEffect:  MapEffect.Water,
        duration: 40,
    }),
    Fracture: createElementalSpell({
        shapeStrategy: 'line',
        type: EffectTarget.Location,
        affect: () => new Affect('timed').create(),
        mapEffect:  MapEffect.Cold,
        duration: 5,
    }),
    Shadow: createElementalSpell({
        shapeStrategy: 'around2',
        type: EffectTarget.Location,
        affect: () => new Affect('blind').params(7).create(),
        mapEffect:  MapEffect.Shadow,
        duration: 40,
    }),
    ColdCloud: createElementalSpell({
        shapeStrategy: 'around',
        type: EffectTarget.Location,
        affect: () => new Affect('cold').create(),
        mapEffect:  MapEffect.Cold,
        duration: 10,
    }),
    FireCloud: createElementalSpell({
        shapeStrategy: 'around',
        type: EffectTarget.Location,
        affect: () => new Affect('fire').turns(2).create(),
        mapEffect:  MapEffect.Fire,
        duration: 10,
    }),
    RainCloud: createElementalSpell({
        shapeStrategy: 'around2',
        type: EffectTarget.Location,
        affect: () => new Affect('wet').create(),
        mapEffect:  MapEffect.Water,
        duration: 10,
    }),
    PoisonCloud: createElementalSpell({
        shapeStrategy: 'around',
        type: EffectTarget.Location,
        affect: () => new Affect('poison').turns(5).create(),
        mapEffect:  MapEffect.Poison,
        duration: 10,
    }),
    LightningCloud: createElementalSpell({
        shapeStrategy: 'around',
        type: EffectTarget.Location,
        affect: () => new Affect('shock').create(),
        mapEffect:  MapEffect.Light,
        duration: 10,
    }),
    FireLine: createElementalSpell({
        shapeStrategy: 'line',
        type: EffectTarget.Location,
        affect: () => new Affect('fire').turns(2).create(),
        mapEffect:  MapEffect.Fire,
        duration: 5,
    }),
    FloralLine: createElementalSpell({
        shapeStrategy: 'line',
        type: EffectTarget.Location,
        affect: () => new Affect('floral').create(),
        mapEffect:  MapEffect.Floral,
        duration: 40,
    }),
    FloralCloud:  createElementalSpell({
        shapeStrategy: 'around',
        type: EffectTarget.Location,
        affect: () => new Affect('floral').create(),
        mapEffect:  MapEffect.Floral,
        duration: 40,
    }),
}